package com.skncoe.tnp.common.registration;

import com.skncoe.tnp.common.LoginJframe;
import com.skncoe.tnp.common.MySqlConnect;
import com.skncoe.tnp.models.PersonalDetails;
import com.skncoe.tnp.models.Student;
import com.skncoe.tnp.models.TPO;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

public final class RegistrationFormPage3Jframe extends javax.swing.JFrame {

    Connection conn = MySqlConnect.getConnection();

    String username = "", password = "", confirmPassword = "", registerAs = "";
    ArrayList<String> takenUsernames = new ArrayList<>();
    PersonalDetails personalDetails;
    TPO tpo;
    Student student;

    public RegistrationFormPage3Jframe(String registerAs, PersonalDetails personalDetails, TPO tpo, Student student) {
        initComponents();

        this.registerAs = registerAs;
        this.personalDetails = personalDetails;
        this.tpo = tpo;
        this.student = student;

        labelUsernameError.setVisible(false);
        labelPasswordError.setVisible(false);
        labelConfirmPasswordError.setVisible(false);
        getExistingUsernames();

    }

    private void getExistingUsernames() {

        String query = "SELECT username FROM  login";
        Statement st;
        ResultSet rs;

        try {
            st = conn.createStatement();
            rs = st.executeQuery(query);
            while (rs.next()) {
                String takenUsername = rs.getString("username");
                takenUsernames.add(takenUsername);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean validatePassword() {
        boolean isValidPassword;
        String passwordPattern = "((?=.*[a-z])(?=.*[A-Z]).{6,20})";
        Pattern pattern = Pattern.compile(passwordPattern);
        Matcher matcher = pattern.matcher(password);
        isValidPassword = matcher.matches();

        if (!isValidPassword) {
            String passwordErrorText = "";
            if (password.length() == 0) {
                passwordErrorText = "Password is required";

            } else {
                passwordErrorText = "<html>Password should contain at least<br>"
                        + "one uppercase letter,<br> one lowercase character <br>"
                        + "and minimum 6 characters</html>";

            }
            labelPasswordError.setText(passwordErrorText);

            labelPasswordError.setVisible(true);
        } else {
            labelPasswordError.setVisible(false);
        }
        return isValidPassword;
    }

    public boolean validateUsername() {

//        User is required, should be unique and can have only letters, numbers, period and underscore
        boolean isValidUsername;
        String usernamePattern = "^[a-zA-Z0-9@._]+$";
        Pattern pattern = Pattern.compile(usernamePattern);
        Matcher matcher = pattern.matcher(username);

        isValidUsername = matcher.matches() && !takenUsernames.contains(username);

        if (!isValidUsername) {
            if (username.length() == 0) {
                labelUsernameError.setText("Username is required");
            } else if (takenUsernames.contains(username)) {
                labelUsernameError.setText("Username already taken");
            } else {
                labelUsernameError.setText("Username can have only letters, numbers, . and _");
            }
            labelUsernameError.setVisible(true);
        } else {
            labelUsernameError.setVisible(false);
        }
        return isValidUsername;
    }

    public boolean validateConfirmPassword() {

//        Re-enter password field is required and should be same as password field
        boolean isValidConfirmPassword = confirmPassword.equals(password) && confirmPassword.length() != 0;

        if (!isValidConfirmPassword) {
            if (confirmPassword.length() == 0) {
                labelConfirmPasswordError.setText("Password is required");
            } else {
                labelConfirmPasswordError.setText("Passwords do not match");
            }
            labelConfirmPasswordError.setVisible(true);
        } else {
            labelConfirmPasswordError.setVisible(false);
        }
        return isValidConfirmPassword;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        labelUsername = new javax.swing.JLabel();
        fieldUsername = new javax.swing.JTextField();
        labelPassword = new javax.swing.JLabel();
        fieldPassword = new javax.swing.JPasswordField();
        labelConfirmPassword = new javax.swing.JLabel();
        fieldConfirmPassword = new javax.swing.JPasswordField();
        labelUsernameError = new javax.swing.JLabel();
        labelPasswordError = new javax.swing.JLabel();
        labelConfirmPasswordError = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        registerButtonPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Register");

        jPanel3.setBackground(new java.awt.Color(36, 47, 65));

        labelUsername.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelUsername.setForeground(new java.awt.Color(255, 255, 255));
        labelUsername.setText("Username : ");

        fieldUsername.setBackground(new java.awt.Color(36, 47, 65));
        fieldUsername.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldUsername.setForeground(new java.awt.Color(255, 255, 255));
        fieldUsername.setBorder(null);
        fieldUsername.setCaretColor(java.awt.Color.white);
        fieldUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldUsernameActionPerformed(evt);
            }
        });
        fieldUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldUsernameKeyReleased(evt);
            }
        });

        labelPassword.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelPassword.setForeground(new java.awt.Color(255, 255, 255));
        labelPassword.setText("Password : ");

        fieldPassword.setBackground(new java.awt.Color(36, 47, 65));
        fieldPassword.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldPassword.setForeground(new java.awt.Color(255, 255, 255));
        fieldPassword.setBorder(null);
        fieldPassword.setCaretColor(java.awt.Color.white);
        fieldPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldPasswordKeyReleased(evt);
            }
        });

        labelConfirmPassword.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelConfirmPassword.setForeground(new java.awt.Color(255, 255, 255));
        labelConfirmPassword.setText("Re-enter password : ");

        fieldConfirmPassword.setBackground(new java.awt.Color(36, 47, 65));
        fieldConfirmPassword.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldConfirmPassword.setForeground(new java.awt.Color(255, 255, 255));
        fieldConfirmPassword.setBorder(null);
        fieldConfirmPassword.setCaretColor(java.awt.Color.white);
        fieldConfirmPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldConfirmPasswordKeyReleased(evt);
            }
        });

        labelUsernameError.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        labelUsernameError.setForeground(new java.awt.Color(230, 49, 29));
        labelUsernameError.setText("usernameError");

        labelPasswordError.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        labelPasswordError.setForeground(new java.awt.Color(230, 49, 29));
        labelPasswordError.setText("passwordError");

        labelConfirmPasswordError.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        labelConfirmPasswordError.setForeground(new java.awt.Color(230, 49, 29));
        labelConfirmPasswordError.setText("reenterPasswordError");

        registerButtonPanel.setBackground(new java.awt.Color(97, 212, 195));
        registerButtonPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registerButtonPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registerButtonPanelMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(36, 47, 65));
        jLabel3.setText("Finish");

        javax.swing.GroupLayout registerButtonPanelLayout = new javax.swing.GroupLayout(registerButtonPanel);
        registerButtonPanel.setLayout(registerButtonPanelLayout);
        registerButtonPanelLayout.setHorizontalGroup(
            registerButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerButtonPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        registerButtonPanelLayout.setVerticalGroup(
            registerButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/regStep3Side.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(registerButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelPassword)
                                        .addComponent(labelUsername)
                                        .addComponent(fieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(fieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator1)
                                        .addComponent(jSeparator2)
                                        .addComponent(labelUsernameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelPasswordError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(labelConfirmPassword))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelConfirmPasswordError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldConfirmPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(labelUsername)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelUsernameError)
                        .addGap(18, 18, 18)
                        .addComponent(labelPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelPasswordError)
                        .addGap(36, 36, 36)
                        .addComponent(labelConfirmPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelConfirmPasswordError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(registerButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/regStep3Top.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean validateForm() {
        boolean isValid = false;

        boolean isValidPassword = validatePassword();
        boolean isValidUsername = validateUsername();
        boolean isValidConfirmPassword = validateConfirmPassword();

        if (isValidUsername && isValidPassword && isValidConfirmPassword) {
            isValid = true;
        }
        return isValid;
    }

    private void fieldPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldPasswordKeyReleased
        password = fieldPassword.getText();
        validatePassword();
        validateConfirmPassword();
    }//GEN-LAST:event_fieldPasswordKeyReleased

    private void fieldConfirmPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldConfirmPasswordKeyReleased
        confirmPassword = fieldConfirmPassword.getText();
        validateConfirmPassword();
    }//GEN-LAST:event_fieldConfirmPasswordKeyReleased

    private void fieldUsernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldUsernameKeyReleased
        username = fieldUsername.getText();
        personalDetails.setUsername(username);
        validateUsername();
    }//GEN-LAST:event_fieldUsernameKeyReleased

    private void registerButtonPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerButtonPanelMouseClicked
        registerUser();
    }//GEN-LAST:event_registerButtonPanelMouseClicked

    private void fieldUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldUsernameActionPerformed

    private void registerUser() {

        boolean isValid = validateForm();
        if (isValid) {
            int id = 0;
            if (registerAs.equals("TPO")) {
                id = 1;
            } else {
                id = 0;
                ;
            }
            String getExistingMaxPid = "SELECT MAX(p_id) from person";
            ResultSet getExistingMaxPidResultSet;
            Statement getExistingMaxPidStatement;
            int maxPid = 0;
            try {
                getExistingMaxPidStatement = conn.createStatement();
                getExistingMaxPidResultSet = getExistingMaxPidStatement.executeQuery(getExistingMaxPid);
                getExistingMaxPidResultSet.next();
                maxPid = getExistingMaxPidResultSet.getInt(1);
            } catch (Exception ex) {
                Logger.getLogger(RegistrationFormPage2TPOJframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            int newPid = maxPid + 1;

//            Insert credentials in login table
            String insertIntoLoginQuery = "INSERT INTO `login`(`username`,"
                    + "`password`,`id`) VALUES ('"
                    + username + "','" + password + "','" + id + "')";
            boolean insertedIntoLogin = MySqlConnect.executeUpdateSQlQuery(insertIntoLoginQuery);

//            Insert personalDetails into person table
            String filePath = personalDetails.getAbsolutePathPhoto();
            boolean hasPhoto = filePath != null && filePath.length() != 0;
            String insertIntoPersonQuery = "";
            if (hasPhoto) {
                insertIntoPersonQuery = "INSERT INTO `person`(`p_id`,`fname`,`lname`,"
                        + "`email`,`phone`,`gender`,`username`,`dob`, `photo`) "
                        + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            } else {
                insertIntoPersonQuery = "INSERT INTO `person`(`p_id`,`fname`,`lname`,"
                        + "`email`,`phone`,`gender`,`username`,`dob`) "
                        + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            }

            PreparedStatement pst = null;
            boolean insertedIntoPerson = false;
            try {
                pst = conn.prepareStatement(insertIntoPersonQuery);
                pst.setInt(1, newPid);
                pst.setString(2, personalDetails.getFirstName());
                pst.setString(3, personalDetails.getLastName());
                pst.setString(4, personalDetails.getEmail());
                pst.setString(5, personalDetails.getMobileNo());
                pst.setString(6, personalDetails.getGender());
                pst.setString(7, personalDetails.getUsername());
                pst.setString(8, personalDetails.getDateOfBirth());

//                Add photo to database
                if (hasPhoto) {
                    File imgfile = new File(personalDetails.getAbsolutePathPhoto());
                    FileInputStream fin = new FileInputStream(imgfile);
                    pst.setBinaryStream(9, (InputStream) fin, (int) imgfile.length());
                }
                insertedIntoPerson = pst.executeUpdate() > 0;

            } catch (Exception e) {
                e.printStackTrace();
            }
            boolean insertedIntoTPO = false, insertedIntoStudent = false;
            if (registerAs.equals("TPO")) {
//              Insert into TPO table
                String insertIntoTPOQuery = "INSERT INTO `TPO`(`designation`,"
                        + "`salary`,`d_id`,"
                        + "`p_id`,`join_date`)VALUES('"
                        + tpo.getDesignation() + "','"
                        + tpo.getSalary() + "','" + tpo.getDepartmentId() + "','"
                        + newPid + "','" + tpo.getJoiningDate() + "')";
                insertedIntoTPO = MySqlConnect.executeUpdateSQlQuery(insertIntoTPOQuery);
            } else if (registerAs.equals("Student")) {
//              Insert into student table
                String insertIntoStudentQuery = "INSERT INTO `student`(`FE`,"
                        + "`SE`,`TE`,`academic_year`,"
                        + "`p_id`,`d_id`)VALUES('" + student.getMarksFirstYear()
                        + "','" + student.getMarksSecondYear() + "','"
                        + student.getMarksThirdYear() + "','"
                        + student.getDate() + "','" + newPid + "','"
                        + student.getDepartmentId() + "')";
                insertedIntoStudent = MySqlConnect.executeUpdateSQlQuery(insertIntoStudentQuery);

            }

//            Close this window
            this.dispose();

//            Show proper message
            if (insertedIntoLogin && insertedIntoPerson
                    && (insertedIntoTPO || insertedIntoStudent)) {
                JOptionPane.showMessageDialog(null, "Registration successful");
            } else {
                JOptionPane.showMessageDialog(null, "Registration failed", "Error", JOptionPane.ERROR_MESSAGE);
            }

            try {
//                Open login wwindow
                new LoginJframe().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(RegistrationFormPage2StudentJframe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrationFormPage3Jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrationFormPage3Jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrationFormPage3Jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrationFormPage3Jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JPasswordField fieldConfirmPassword;
    private javax.swing.JPasswordField fieldPassword;
    private javax.swing.JTextField fieldUsername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelConfirmPassword;
    private javax.swing.JLabel labelConfirmPasswordError;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelPasswordError;
    private javax.swing.JLabel labelUsername;
    private javax.swing.JLabel labelUsernameError;
    private javax.swing.JPanel registerButtonPanel;
    // End of variables declaration//GEN-END:variables
}
